Strict Mode:
    To activate the strict mode write 'use strict' in the begining of tha page. If we have any code before 'use strict, then strict mode will not be activated. Only comments are allowed but not code.
    Without strict mode JavaScript will work without letting us know that we did a mistake.
    First srict mode forbids us to do certain things, second it creates visibe errors and the developer conole, were in other situations JavaScript would just fail silently.

Functions:
    Real world JavaScript applications are functions, a function can be reused over and ver again in our code like we use variable.
    Vriable holds value but function can hold one or more complete lines of code.
    Functions helps us to do dry code by not repeating the code.
    In a function we have 'function' key word then fnction name, then 'parameters'(varables to take input values),then function body in between curly barases '{}', in the body we use return statement to uotput the value of a function. Once exicuting return statement, it immidiately terminates the function execution. We call the function, write the function name and give arguments(actual input values of function parameters) in between paranthesis and we call the function, without paranthesis it will become just a value
    Function declerations, arrow functions and function expressions are different ways to write a function but works in a same way. They can recive input data, transform data and then output data.
    Example:
        function logger(){
            console.log('My name is Pranai')
        }
        //Calling /running / invoking function
        logger();
        function fruitProcessor(apples, oranges) {
            const juice = `Juice with ${apples} apples and ${oranges} oranges.`;
            return juice;
        }

        const appleJuice = fruitProcessor(5, 0);
        console.log(appleJuice);

        const appleOrangeJuice = fruitProcessor(2, 4);
        console.log(appleOrangeJuice);

Function declaration:
    Function declaration can be used befor they are declared in the code.
        function calcAge1(birthYeah) {
            return 2037 - birthYeah;
        }
        const age1 = calcAge1(1991);

Function expression:
    Function expressions are values that are stored in a variable and cannot first call the function and then define it later.
        const calcAge2 = function (birthYeah) {
            return 2037 - birthYeah;
        }
        const age2 = calcAge2(1991);

        console.log(age1, age2);

Arrow Functions: These are also function expressions but speial ones are are great for one line functions where we don't need to explicitily use the return keyword and no curly braces either.
Example:
    const calcAge3 = birthYeah => 2037 - birthYeah;
    const age3 = calcAge3(1991);
    console.log(age3);

    const yearsUntilRetirement = (birthYeah, firstName) => {
        const age = 2037 - birthYeah;
        const retirement = 65 - age;
        // return retirement;
        return `${firstName} retires in ${retirement} years`;
    }

    console.log(yearsUntilRetirement(1991, 'Jonas')); console.log(yearsUntilRetirement(1980, 'Bob'));
Example 2:
    const calcAge = function (birthYeah) {
        return 2037 - birthYeah;
    }

    const yearsUntilRetirement = function (birthYeah, firstName) {
    const age = calcAge(birthYeah);
    const retirement = 65 - age;

        if (retirement > 0) {
            console.log(`${firstName} retires in ${retirement} years`);
            return retirement;
        } else {
            console.log(`${firstName} has already retired ðŸŽ‰`);
            return -1;
        }
    }

console.log(yearsUntilRetirement(1991, 'Jonas'));
console.log(yearsUntilRetirement(1950, 'Mike'));

Function calling other functions:
Example:
    function cutFruitPieces(fruit) {
        return fruit * 4;
    }

    function fruitProcessor(apples, oranges) {
        const applePieces = cutFruitPieces(apples);
        const orangePieces = cutFruitPieces(oranges);

        const juice = `Juice with ${applePieces} piece of apple and ${orangePieces} pieces of orange.`;
        return juice;
    }
    console.log(fruitProcessor(2, 3));?


